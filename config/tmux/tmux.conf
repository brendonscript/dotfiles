# if run as "tmux attach", create a session if one does not already exist
# new-session -n $HOST

# set-option -g default-shell /opt/homebrew/bin/zsh

### Plugins ###

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-yank'

# Plugin Settings
set -g @continuum-restore 'off'
TMUX_FZF_LAUNCH_KEY="C-f"
TMUX_FZF_OPTIONS="-p 50%"

set -g default-terminal "screen-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"

### Keybinds ###

# Leader
unbind-key C-b
unbind-key C-a
set-option -g prefix C-a
set-option -g prefix2 M-space
bind-key C-a send-prefix
# bind-key M-space send-prefix
# Shortcuts

bind-key R source-file ~/.config/tmux/tmux.conf \; display "Reloaded ~/.tmux.conf"
bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

# Windows
bind-key c new-window
bind-key n next-window
bind-key p previous-window
# bind-key M-space last-window
bind-key C-a last-window
bind-key space next-layout
bind-key C-space select-layout
bind-key M-v select-layout main-vertical
bind-key M-s select-layout main-horizontal
bind-key M-V select-layout even-vertical
bind-key M-S select-layout even-horizontal

# Sessions
bind-key C-n switch-client -n
bind-key C-p switch-client -p
bind-key T choose-session
bind-key t choose-tree

# Panes
bind-key v split-window -hc "#{pane_current_path}"
bind-key s split-window -vc "#{pane_current_path}"

bind-key enter next-layout
bind-key C-o rotate-window

bind-key a last-pane
bind-key q display-panes

bind-key S command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key B command-prompt -p "send pane to:"  "join-pane -t '%%'"
bind-key b break-pane

bind-key -n M-z resize-pane -Z

# Vim Integration
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

bind -n 'C-M-h' if-shell "$is_vim" 'send-keys C-M-h' 'resize-pane -L 1'
bind -n 'C-M-j' if-shell "$is_vim" 'send-keys C-M-j' 'resize-pane -D 1'
bind -n 'C-M-k' if-shell "$is_vim" 'send-keys C-M-k' 'resize-pane -U 1'
bind -n 'C-M-l' if-shell "$is_vim" 'send-keys C-M-l' 'resize-pane -R 1'

bind-key -T copy-mode-vi M-h resize-pane -L 1
bind-key -T copy-mode-vi M-j resize-pane -D 1
bind-key -T copy-mode-vi M-k resize-pane -U 1
bind-key -T copy-mode-vi M-l resize-pane -R 1

bind-key -T copy-mode-vi L send -X end-of-line
bind-key -T copy-mode-vi H send -X back-to-indentation
bind-key -T copy-mode-vi Escape send -X cancel

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Copy Mode
bind-key [ copy-mode
bind-key ] copy-mode
bind-key P paste-buffer

# if-shell -b 'test $(uname) = "Linux"' 'bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"'
# if-shell -b 'test $(uname) = "Darwin"' 'bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"'

# bind-key -T copy-mode-vi v send -X begin-selection
# bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#
# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"



### Theme ###

# FZF_DEFAULT_OPTS="--color=bg+:#2f334d,bg:#222436,spinner:#c099ff,hl:#636da6,fg:#c8d3f5,header:#636da6,info:#86e1fc,pointer:#c099ff,marker:#86e1fc,fg+:#c8d3f5,preview-bg:#1e2030,prompt:#c099ff,hl+:#c099ff"
set-option -g status-position top
# set -g @plugin "janoamaral/tokyo-night-tmux"
source-file ~/.config/tmux/themes/custom.tmux


### Options ###

# set -g default-terminal "xterm-kitty"
# set-option -sa terminal-overrides ",xterm-kitty:RGB"
set -as terminal-overrides ',:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
set-option -sa terminal-features ',XXX:RGB'
# set-option -g default-terminal "xterm-256color"
# set-option -ga terminal-overrides ',xterm-256color:Tc'

# Count sessions start at 1
set -g base-index 1
setw -g pane-base-index 1
setw -g mouse on
set -g set-titles on
set -g set-titles-string "#T"
set-option -g renumber-windows on
set-option -g mode-keys vi

# Set window notifications
setw -g monitor-activity off
set -g visual-activity on

set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'
set -g detach-on-destroy off

# set-option -g automatic-rename-format "#{?#{==:#{pane_current_command},bash},#{b:pane_current_path},#{pane_current_command}}"
# set-option -g xterm-keys on


### Setup ###

# Enable pbcopy/pbpaste in tmux.
if-shell \
'test "$(uname -s)" = Darwin && type reattach-to-user-namespace > /dev/null' \
'set-option -g default-command "exec reattach-to-user-namespace -l zsh"'

# TPM: https://github.com/tmux-plugins/tpm
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
run '~/.tmux/plugins/tpm/tpm'
