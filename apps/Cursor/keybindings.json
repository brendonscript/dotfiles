[
  //==================
  //=== TERMINAL ====
  //==================

  {
    "key": "ctrl+alt+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+a s",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+5",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.terminal.splitActiveTab",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+shift+5",
    "command": "-workbench.action.terminal.splitActiveTab",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+a c",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+`",
    "command": "-workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+a 1",
    "command": "workbench.action.terminal.focusAtIndex1",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 2",
    "command": "workbench.action.terminal.focusAtIndex2",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 3",
    "command": "workbench.action.terminal.focusAtIndex3",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 4",
    "command": "workbench.action.terminal.focusAtIndex4",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 5",
    "command": "workbench.action.terminal.focusAtIndex5",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 6",
    "command": "workbench.action.terminal.focusAtIndex6",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 7",
    "command": "workbench.action.terminal.focusAtIndex7",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 8",
    "command": "workbench.action.terminal.focusAtIndex8",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a 9",
    "command": "workbench.action.terminal.focusAtIndex9",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+c",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a shift+5",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && panelPosition == 'bottom'"
  },
  {
    "key": "ctrl+a shift+'",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && panelPosition != 'bottom'"
  },
  {
    "key": "ctrl+shift+5",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+s",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.terminal.resizePaneUp",
    "when": "terminalFocus"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.terminal.resizePaneDown",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+k",
    "command": "workbench.action.terminal.resizePaneUp",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+j",
    "command": "workbench.action.terminal.resizePaneDown",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+h",
    "command": "workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+l",
    "command": "workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a w",
    "command": "workbench.action.quickOpenTerm",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a z",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a n",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a p",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+a",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+a ctrl+a",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && panelPosition == 'bottom'"
  },
  {
    "key": "ctrl+a right",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && panelPosition == 'bottom'"
  },
  {
    "key": "ctrl+a left",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && panelPosition == 'bottom'"
  },
  {
    "key": "ctrl+a down",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && panelPosition != 'bottom'"
  },
  {
    "key": "ctrl+a up",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && panelPosition != 'bottom'"
  },
  {
    "key": "ctrl+a x",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },

  //==================
  //== SCROLLING ====
  //==================
  {
    "command": "germanScroll.arminUp",
    "key": "ctrl+y",
    "mac": "cmd+y",
    "when": "neovim.init && editorTextFocus && neovim.mode != 'insert'"
  },
  {
    "command": "germanScroll.arminDown",
    "key": "ctrl+e",
    "mac": "cmd+e",
    "when": "neovim.init && editorTextFocus && neovim.mode != 'insert'"
  },
  {
    "command": "germanScroll.bertholdUp",
    "key": "ctrl+u",
    "mac": "cmd+u",
    "when": "neovim.init && editorTextFocus && neovim.mode != 'insert'"
  },
  {
    "command": "germanScroll.bertholdDown",
    "key": "ctrl+d",
    "mac": "cmd+d",
    "when": "neovim.init && editorTextFocus && neovim.mode != 'insert'"
  },
  {
    "command": "germanScroll.christaUp",
    "key": "ctrl+b",
    "mac": "cmd+b",
    "when": "neovim.init && editorTextFocus && neovim.mode != 'insert'"
  },
  {
    "command": "germanScroll.christaDown",
    "key": "ctrl+f",
    "mac": "cmd+f",
    "when": "neovim.init && editorTextFocus && neovim.mode != 'insert'"
  },

  //==================
  //=== UTILITIES ===
  //==================
  {
    "key": "ctrl+a ctrl+p",
    "command": "workbench.action.previousEditor",
    "when": "editorFocus && !codeActionMenuVisible && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+a ctrl+n",
    "command": "workbench.action.nextEditor",
    "when": "editorFocus && !codeActionMenuVisible && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen",
    "when": "!codeActionMenuVisible && !suggestWidgetVisible"
  },
  {
    "key": "j",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "k",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "q",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "q",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "q",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "q",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus && !inputFocus"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+shift+b",
    "command": "-workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  {
    "key": "f1",
    "command": "-workbench.action.showCommands"
  },
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+shift+s",
    "command": "-workbench.action.files.saveAs"
  },
  {
    "key": "space",
    "command": "whichkey.show",
    "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+space",
    "command": "whichkey.show",
    "when": "!editorTextFocus"
  },
  {
    "key": "shift+alt+o",
    "command": "-extension.switchTemplate"
  },
  {
    "key": "shift+alt+u",
    "command": "-extension.switchTs"
  },
  {
    "key": "shift+alt+i",
    "command": "-extension.switchStyle"
  },

  //==================
  //=== NAVIGATION ===
  //==================
  {
    "key": "escape",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorTextFocus"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.openPreviousEditorFromHistory"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.compareEditor.focusSecondarySide",
    "when": "isInDiffEditor && !isInDiffLeftEditor"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "isInDiffEditor && isInDiffLeftEditor"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.compareEditor.focusPrimarySide",
    "when": "isInDiffEditor && isInDiffLeftEditor"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "isInDiffEditor && !isInDiffLeftEditor"
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.navigateForward"
  },
  {
    "key": "ctrl+k",
    "when": "codeActionMenuVisible",
    "command": "selectPrevCodeAction"
  },
  {
    "key": "ctrl+f",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+alt+j",
    "command": "extension.addDocComments"
  },
  {
    "key": "j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "h",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "l",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "shift+k",
    "command": "editor.action.showHover",
    "when": "editorTextFocus && neovim.mode == normal"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible && textInputFocus"
  },

  {
    "key": "ctrl+f",
    "command": "insertBestCompletion",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
  },
  {
    "key": "ctrl+f",
    "command": "insertNextSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "ctrl+f",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },

  {
    "key": "ctrl+f",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "key": "ctrl+alt+space",
    "command": "editor.action.inlineSuggest.trigger",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },

  //==================
  //=== UI ===========
  //==================
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor",
    "when": "!editorTextFocus"
  },
  {
    "key": "ctrl+s",
    "command": "workbench.action.alternativeAcceptSelectedQuickOpenItem",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+s",
    "command": "problems.action.openToSide",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+s",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "ctrl+s",
    "command": "openReferenceToSide",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
  },
  {
    "key": "ctrl+s",
    "command": "search.action.openResultToSide",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.closePanel",
    "when": "panelFocus"
  },
  {
    "key": "ctrl+h",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "list.expand",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },

  //==================
  //=== NEOVIM =======
  //==================
  {
    "key": "alt+l",
    "args": "<M-l>",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal./ && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "alt+k",
    "args": "<M-k>",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal./ && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "alt+j",
    "args": "<M-j>",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal./ && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "alt+h",
    "args": "<M-h>",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal./ && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+/",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysInsert./ && neovim.init && neovim.mode == 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+/",
    "command": "-vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal./ && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
  },
  {
    "key": "ctrl+space",
    "command": "vscode-neovim.send",
    "args": "<space>",
    "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'"
  },

  //==================
  //=== DEBUG ========
  //==================
  {
    "key": "shift+k",
    "command": "editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode && neovim.mode == normal"
  },

  //==================
  //=== EXPLORER =====
  //==================
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "v",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "c",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+alt+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
  },
  {
    "key": "alt+space",
    "command": "-workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
  },
  {
    "key": "ctrl+k i",
    "command": "-inlineChat.start",
    "when": "editorFocus && inlineChatHasProvider && !editorReadonly"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-editor.action.addCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k m",
    "command": "-workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused"
  },
  {
    "key": "ctrl+k ctrl+alt+c",
    "command": "-workbench.action.addComment"
  },
  {
    "key": "ctrl+k ctrl+alt+down",
    "command": "-editor.action.nextCommentingRange",
    "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
  },
  {
    "key": "ctrl+k ctrl+alt+up",
    "command": "-editor.action.previousCommentingRange",
    "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
  },
  {
    "key": "ctrl+k ctrl+,",
    "command": "-editor.createFoldingRangeFromSelection",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "-editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.defineKeybinding",
    "when": "resource == 'vscode-userdata:/c%3A/Users/Brendon/AppData/Roaming/Code/User/keybindings.json'"
  },
  {
    "key": "ctrl+k e",
    "command": "-workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
  },
  {
    "key": "ctrl+k c",
    "command": "-workbench.files.action.compareWithClipboard"
  },
  {
    "key": "ctrl+k d",
    "command": "-workbench.files.action.compareWithSaved"
  },
  {
    "key": "ctrl+k ctrl+shift+c",
    "command": "-copyRelativeFilePath",
    "when": "!editorFocus"
  },
  {
    "key": "ctrl+k ctrl+shift+c",
    "command": "-copyRelativeFilePath",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "-workbench.action.files.openFolder",
    "when": "openFolderWorkspaceSupport"
  },
  {
    "key": "ctrl+k ctrl+shift+s",
    "command": "-workbench.action.files.saveWithoutFormatting"
  },
  {
    "key": "ctrl+k ctrl+p",
    "command": "-workbench.action.showAllEditors"
  },
  {
    "key": "ctrl+k ctrl+0",
    "command": "-editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "-editor.foldAllBlockComments",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+-",
    "command": "-editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+8",
    "command": "-editor.foldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+1",
    "command": "-editor.foldLevel1",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+2",
    "command": "-editor.foldLevel2",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+3",
    "command": "-editor.foldLevel3",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+4",
    "command": "-editor.foldLevel4",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+5",
    "command": "-editor.foldLevel5",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+6",
    "command": "-editor.foldLevel6",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+7",
    "command": "-editor.foldLevel7",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+[",
    "command": "-editor.foldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+f",
    "command": "-editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "-git.revertSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "ctrl+k ctrl+alt+s",
    "command": "-git.stageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "ctrl+k ctrl+n",
    "command": "-git.unstageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "ctrl+k m",
    "command": "-pr.makeSuggestion",
    "when": "commentEditorFocused"
  },
  {
    "key": "ctrl+k ctrl+q",
    "command": "-workbench.action.navigateToLastEditLocation"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "-workbench.action.keybindingsReference"
  },
  {
    "key": "ctrl+k i",
    "command": "-inlineChat.quickVoice.start",
    "when": "editorFocus && hasSpeechProvider && !inlineChat.quickChatInProgress"
  },
  {
    "key": "ctrl+k i",
    "command": "-inlineChat.quickVoice.stop",
    "when": "hasSpeechProvider && inlineChat.quickChatInProgress"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+k ctrl+d",
    "command": "-editor.action.moveSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "ctrl+k t",
    "command": "-notebook.cell.collapseCellOutput",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "key": "ctrl+k t",
    "command": "-notebook.cell.expandCellOutput",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "-notebook.cell.split",
    "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
  },
  {
    "key": "ctrl+k y",
    "command": "-notebook.cell.toggleOutputScrolling",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
  },
  {
    "key": "ctrl+k ctrl+shift+n",
    "command": "-notifications.showList"
  },
  {
    "key": "ctrl+k f12",
    "command": "-editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+k ctrl+f12",
    "command": "-editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+k ctrl+t",
    "command": "-workbench.action.selectTheme"
  },
  {
    "key": "ctrl+k ctrl+s",
    "command": "-workbench.action.openGlobalKeybindings"
  },
  {
    "key": "ctrl+k x",
    "command": "-quokka.copyValue",
    "when": "quokka.hasActiveSession && quokka.isActiveEditorRunningQuokka && !quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k i",
    "command": "-quokka.installMissingPackageToQuokka",
    "when": "quokka.hasActiveSession && !quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k l",
    "command": "-quokka.createFile",
    "when": "!quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k j",
    "command": "-quokka.createJavaScriptFile",
    "when": "!quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k t",
    "command": "-quokka.createTypeScriptFile",
    "when": "!quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k v",
    "command": "-quokka.showValue",
    "when": "quokka.hasActiveSession && quokka.isActiveEditorRunningQuokka && !quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k q",
    "command": "-quokka.makeQuokkaFromExistingFile",
    "when": "!quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k e",
    "command": "-quokka.stopCurrent",
    "when": "quokka.hasActiveSession && !quokka.isLiveShareClient && !terminalFocus"
  },
  {
    "key": "ctrl+k ctrl+u",
    "command": "-editor.action.removeCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+.",
    "command": "-editor.removeManualFoldingRanges",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.selectFromAnchorToCursor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "ctrl+k ctrl+b",
    "command": "-editor.action.setSelectionAnchor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "-editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "-workbench.action.terminal.focusHover",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+k ctrl+l",
    "command": "-editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "-editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "-editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+=",
    "command": "-editor.unfoldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+9",
    "command": "-editor.unfoldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "-editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+shift+w",
    "command": "-workbench.action.closeAllGroups"
  },
  {
    "key": "ctrl+k ctrl+w",
    "command": "-workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+k u",
    "command": "-workbench.action.closeUnmodifiedEditors"
  },
  {
    "key": "ctrl+k o",
    "command": "-workbench.action.copyEditorToNewWindow",
    "when": "activeEditor"
  },
  {
    "key": "ctrl+k ctrl+up",
    "command": "-workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+k ctrl+down",
    "command": "-workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "-workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "-workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "-workbench.action.joinEditorInGroup",
    "when": "sideBySideEditorActive"
  },
  {
    "key": "ctrl+k enter",
    "command": "-workbench.action.keepEditor"
  },
  {
    "key": "ctrl+k down",
    "command": "-workbench.action.moveActiveEditorGroupDown"
  },
  {
    "key": "ctrl+k left",
    "command": "-workbench.action.moveActiveEditorGroupLeft"
  },
  {
    "key": "ctrl+k right",
    "command": "-workbench.action.moveActiveEditorGroupRight"
  },
  {
    "key": "ctrl+k up",
    "command": "-workbench.action.moveActiveEditorGroupUp"
  },
  {
    "key": "ctrl+k ctrl+pagedown",
    "command": "-workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+k ctrl+pageup",
    "command": "-workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.pinEditor",
    "when": "!activeEditorIsPinned"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorDown"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "-workbench.action.splitEditorInGroup",
    "when": "activeEditorCanSplitInGroup"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorLeft"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorRight"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorUp"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "-workbench.action.toggleMaximizeEditorGroup",
    "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
  },
  {
    "key": "ctrl+k z",
    "command": "-workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.unpinEditor",
    "when": "activeEditorIsPinned"
  },
  {
    "key": "ctrl+k f",
    "command": "-workbench.action.closeFolder",
    "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
  },
  {
    "key": "ctrl+k ctrl+a",
    "command": "-keybindings.editor.addKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+k ctrl+e",
    "command": "-keybindings.editor.defineWhenExpression",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown.extension.closePreview",
    "when": "activeWebviewPanelId == 'markdown.preview'"
  },
  {
    "key": "ctrl+k i",
    "command": "-notebook.cell.chat.start",
    "when": "config.notebook.experimental.cellChat && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "key": "ctrl+k s",
    "command": "-saveAll"
  },
  {
    "key": "ctrl+k f2",
    "command": "-togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "ctrl+k down",
    "command": "-views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k left",
    "command": "-views.moveViewLeft",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k right",
    "command": "-views.moveViewRight",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k up",
    "command": "-views.moveViewUp",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k shift+o",
    "command": "-workbench.action.compareEditor.openSide",
    "when": "inDiffEditor"
  },
  {
    "key": "ctrl+k p",
    "command": "-workbench.action.files.copyPathOfActiveFile"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "-workbench.action.files.openLocalFolder",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+k r",
    "command": "-workbench.action.files.revealActiveFileInWindows"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "-workbench.action.showTreeHover",
    "when": "customTreeView && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+pageup",
    "command": "-germanScroll.bertholdUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+pagedown",
    "command": "-germanScroll.bertholdDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.scm.action.focusNextInput",
    "when": "scmRepository"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.scm.action.focusNextResourceGroup",
    "when": "scmRepository"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.scm.action.focusPreviousResourceGroup",
    "when": "scmRepository"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.scm.action.focusPreviousInput",
    "when": "scmRepository"
  }
]

// better scrolling
// {
//   "key": "ctrl+u",
//   "command": "vscode-neovim.send",
//   "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
//   "args": "<C-u>"
// },
// {
//   "key": "ctrl+d",
//   "command": "vscode-neovim.send",
//   "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
//   "args": "<C-d>"
// },

// {
//   "key": "ctrl+f",
//   "command": "vscode-neovim.send",
//   "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
//   "args": "<C-f>"
// },

// {
//   "key": "ctrl+b",
//   "command": "vscode-neovim.send",
//   "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
//   "args": "<C-b>"
// },

// {
//   "key": "space",
//   "command": "vscode-neovim.send",
//   "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
//   "args": "<space>"
// },
// {
//   "key": "space",
//   "args": "<space>",
//   "command": "vscode-neovim.send",
//   "when": "editorFocus && neovim.init && neovim.mode != 'insert'"
// },